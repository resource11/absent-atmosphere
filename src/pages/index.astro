---
import { getCollection, getEntry } from "astro:content";
import { Image } from "astro:assets";
import Layout from "../layouts/Layout.astro";
import LineDot from "../components/LineDot/LineDot.astro";
import CTALink from "../components/CTALink/CTALink.astro";
import Link from "../components/Link/Link.astro";
import HeadingAccentImage from "../assets/images/hero-masked.svg";
import RecentBgMasked from "../assets/images/sm-bot-white-diamond.svg";
import "../styles/page-styles/home.css";
import "../components/Card/Card.css";

const pageTitle = "Kathleen McMahon | Engineer - Designer - Speaker";
const contentList = await getEntry("dataYML", "content-list");
const recentSpeaking = contentList.data.recentSpeaking;
export async function getStaticPaths() {
  const blogEntries = await getCollection("blog");
  return blogEntries.map((data) => ({
    params: { slug: data.slug },
    props: { data },
  }));
}
const featuredPosts = await getCollection("blog", ({ data }) => {
  return data.isFeatured === true;
});

const cardListClasses = `cardUl stackCardList grid`;
const postListClasses = `postUl stackPostList`;

interface Props {
  ariaLabel?: string;
  href: string;
  icon?: string | null;
  iconAfter?: boolean;
  iconBefore?: boolean;
  iconClasses?: string;
  iconSpanClasses?: string;
  linkClasses?: string;
  size?: string;
}
---

<Layout pageTitle={pageTitle}>
  <img src={HeadingAccentImage.src} alt="" class="heroImageMasked" />
  <article class="bodyWrapper">
    <article class="contentWrapper">
      <header class="homeHeader">
        <h1 class="homeH1">Kathleen McMahon</h1>
        <p class="homeIntroPara">
          Hello! I'm Kathleen, an engineer, designer, speaker, and occasional
          writer. This is the space where I cultivate my interests.
        </p>
        <LineDot />
      </header>
      <img src={RecentBgMasked.src} alt="" class="recentTalksBgMasked" />
      <article class="css.recentTalks">
        <h2 class="recentTalksH2">
          Recent talks, <br />
          podcasts, streams
        </h2>
        <ul class={cardListClasses}>
          {
            recentSpeaking.map((speak) => (
              <li class="cardListItem">
                <article class="cardRoot">
                  {speak.image && (
                    <header class="cardHeader">
                      <div class="cardCropper">
                        <Image
                          slot="image"
                          src={speak.image}
                          alt={speak.name}
                          width={1605}
                          height={901}
                          class="cardImage"
                        />
                      </div>
                    </header>
                  )}
                  <div class={"cardContentWrapper"}>
                    <footer class={"cardFooterWrapper"}>
                      <Link
                        href={speak.link}
                        aria-label={speak.ctaAria ? speak.ctaAria : null}
                        linkClasses="cardFooterLink"
                        icon={"arrow-right"}
                        iconAfter
                        size="small"
                        iconSpanClasses="cardFooterLinkIcon"
                      >
                        {speak.cta}
                      </Link>
                    </footer>
                  </div>
                </article>
              </li>
            ))
          }
        </ul>
        <CTALink
          size="small"
          href="/speak/"
          CTALinkClasses="ctaLink"
          CTAIconSpanClasses="ctaLinkIcon"
        >
          Browse all media
        </CTALink>
      </article>
      <hr class="purpleRedHR" />
      <article class="featuredPosts">
        <h2>Featured posts</h2>
        <ul class={postListClasses}>
          {
            featuredPosts.map((post) => (
              <li class="postListItem">
                <Link href={`posts/${post.slug}`} linkClasses="postListLink">
                  {post.data.title}
                </Link>
                <span class="postListPublishedDate">
                  <span class="postListPublished">Published:</span>{" "}
                  {post.data.date.toDateString()}
                </span>
              </li>
            ))
          }
        </ul>
        <CTALink
          size="small"
          href="/write/"
          CTALinkClasses="ctaLink"
          CTAIconSpanClasses="ctaLinkIcon"
        >
          Browse all writing
        </CTALink>
      </article>
    </article>
  </article>
</Layout>
